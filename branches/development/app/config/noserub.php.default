<?php

/**
 * A hash value to protect some admin routes from execution by
 * non-authorized users. Such routes are eg the one for 
 * synchronizing accounts from external identities
 */
Configure::write('NoseRub.admin_hash', '');

/**
 * Similar to NoseRub.admin_hash, but only used
 * for some cronjob routes that can called by URL with this
 * hash. Only needed, if you install NoseRub on a server
 * without access to the crontab.
 *
 * Don't use the same value for NoseRub.admin_hash and NoseRub.cron_hash!
 *
 * The URLs for these cronjobs are:
 * <NoseRub.full_base_url>/jobs/cron/<NoseRub.cron_hash>/identities/sync/all/
 * <NoseRub.full_base_url>/jobs/cron/<NoseRub.cron_hash>/cache/feed/refresh/
 *
 * These cronjobs can take some time to finish, so you might run into
 * problems with timeouts of the webserver you're using.
 */
Configure::write('NoseRub.cron_hash', '');

/**
 * If set to "false", NoseRub will update the entries
 * for an account whenever you go to a user's page.
 * For better performance, you should set this to
 * "true" and add a cronjob for this purpose.
 */
Configure::write('NoseRub.manual_feeds_update', false);

/**
 * E-Mail address, that is put into the From: header,
 * when sending out emails.
 */
Configure::write('NoseRub.email_from', 'info@...');

/**
 * When this settings are present in noserub.php, NoseRub
 * uses them to send out emails. Otherwise, the php mail
 * settings are used. 
 */
Configure::write('NoseRub.smtp_options', array(
	'port'     => '25',
	'timeout'  => '30',
	'host'     => 'your.smtp.server',
	'username' => 'your_smtp_username',
	'password' => 'your_smtp_password'
));

/**
 * For better reliability, NoseRub can store some data to
 * a Content Delivery Network (CDN). You can enable the
 * usage of a CDN here. Please make sure you provide
 * access information to your CDN below.
 */
Configure::write('NoseRub.use_cdn', false);

/**
 * You need to enter this three fields, when you want to
 * use Amazon S3 (http://s3.amazonaws.com) as CDN.
 * The access- and secret key will be provided in the settings
 * section of Amazon S3. You will need to create one "Bucket"
 * yourself. All data for this NoseRub installation will be
 * stored in that bucket.
 */
Configure::write('NoseRub.cdn_s3_access_key', '');
Configure::write('NoseRub.cdn_s3_secret_key', '');
Configure::write('NoseRub.cdn_s3_bucket', 'cdn.mynoserubserver.com');

Configure::write('NoseRub.xmpp_full_feed_user', '');
Configure::write('NoseRub.xmpp_full_feed_password', '');
Configure::write('NoseRub.xmpp_full_feed_server', 'jabber.identoo.com');
Configure::write('NoseRub.xmpp_full_feed_port', 5222);

/**
 * If you, as the admin of this NoseRub installation do not feel
 * comfortable with the Twitter Bridge, you can deactivate it here
 * for every user on your site.
 */
Configure::write('NoseRub.allow_twitter_bridge', true);

/**
 * Uncomment this line if you get the following error when you try 
 * to authenticate your OpenID: "Fatal error: Define 
 * Auth_OpenID_RAND_SOURCE as null to continue with an insecure 
 * random number generator".
 * You can also define your own source of randomness here if you
 * want use a source different than /dev/urandom.
 */
// define('Auth_OpenID_RAND_SOURCE', null);